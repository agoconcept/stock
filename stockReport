#!/usr/bin/python3

# Do not use Xwindows backend
import matplotlib
matplotlib.use('Agg')

import pandas as pd
from pandas_datareader import DataReader
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib import cm
import subprocess
import time


# Constants
UP_CHAR = u'\u2191'
DN_CHAR = u'\u2193'
EQ_CHAR = u'\u2194'


def getTrendStr(current, average):
    if (current > average):
        return UP_CHAR
    elif (current < average):
        return DN_CHAR
    else:
        return EQ_CHAR


def getStreak(data):
    ret = ""
    for i in range(10):
        if (data[-i] > data[-i-1]):
            ret = UP_CHAR + ret
        elif (data[-i] < data[-i-1]):
            ret = DN_CHAR + ret
        else:
            ret = EQ_CHAR + ret

    return ret


# Send initial message to telegram
subprocess.call("telegram-send -- 'Collecting and analyzing data for IBEX35...'", shell=True)


# Read IBEX data from Yahoo Finance
# NOTE! Retrying, because sometimes it fails
for retry in range(1, 6):
    try:
        stock = DataReader('^IBEX',  'yahoo', datetime(2005, 1, 1), datetime.today(), retry_count=10)
    except:
        print("RETRY #%d - Error reading from Yahoo Finance" % (retry))
        time.sleep(3)
        continue
    break


# Build DataFrame from rolling averages
rolling_5d = pd.rolling_mean(stock['Close'], 5, min_periods=1)
rolling_20d = pd.rolling_mean(stock['Close'], 20, min_periods=1)
rolling_60d = pd.rolling_mean(stock['Close'], 60, min_periods=1)
rolling_250d = pd.rolling_mean(stock['Close'], 250, min_periods=1)

rolling_averages = pd.DataFrame({
    '1D (D)': stock['Close'],
    '5D (W)': rolling_5d,
    '20D (M)': rolling_20d,
    '60D (Q)': rolling_60d,
    '250D (Y)': rolling_250d
    },
    columns=['1D (D)', '5D (W)', '20D (M)', '60D (Q)', '250D (Y)'])


# Generate figures
plot_params = {
    'title': 'Rolling averages',
    'linewidth': 2,
    'solid_capstyle': 'round',
    'grid': True,
    'fontsize': 8,
    'colormap': cm.gist_rainbow
}

plt.figure(figsize=(32, 24), dpi=100)
rolling_averages.plot(**plot_params)
plt.savefig('stockMax.pdf', dpi=100)
plt.close()

plt.figure(figsize=(32, 24), dpi=100)
rolling_averages[-750:].plot(**plot_params)
plt.savefig('stock3Y.pdf', dpi=100)
plt.close()

plt.figure(figsize=(32, 24), dpi=100)
rolling_averages[-250:].plot(**plot_params)
plt.savefig('stock1Y.pdf', dpi=100)
plt.close()

plt.figure(figsize=(32, 24), dpi=100)
rolling_averages[-60:].plot(**plot_params)
plt.savefig('stock1Q.pdf', dpi=100)
plt.close()


# Prepare report
formatted_date = stock.index[-1:][0].strftime("%Y-%m-%d")

prev_close = stock['Close'][-2]
last_close = stock['Close'][-1]
diff_abs = last_close-prev_close
diff_pct = 100.0 * (last_close-prev_close) / prev_close

open_val = stock['Open'][-1]
high_val = stock['High'][-1]
low_val = stock['Low'][-1]
vol_val = stock['Volume'][-1]

trend5d = getTrendStr(last_close, rolling_5d[-1])
trend20d = getTrendStr(last_close, rolling_20d[-1])
trend60d = getTrendStr(last_close, rolling_60d[-1])
trend250d = getTrendStr(last_close, rolling_250d[-1])

streak = getStreak(stock['Close'])

info = """
********************
ANALYSIS: %s
********************
Current: %.2f
Diff: %+.2f (%+.2f%%)
Pre: %.2f - Op: %.2f
Range: %.2f - %.2f
Volume: %.3fB
---
5d avg: %.2f (%s)
20d avg: %.2f (%s)
60d avg: %.2f (%s)
250d avg: %.2f (%s)
---
10 day streak: %s
""" % (
        formatted_date,
        last_close,
        diff_abs, diff_pct,
        prev_close, open_val,
        low_val, high_val,
        vol_val/1000000.0,
        rolling_5d[-1], trend5d,
        rolling_20d[-1], trend20d,
        rolling_60d[-1], trend60d,
        rolling_250d[-1], trend250d,
        streak
        )


# Send data to telegram
subprocess.call("telegram-send -- '%s'" % (info), shell=True)

subprocess.call("telegram-send -f stockMax.pdf stock3Y.pdf stock1Y.pdf stock1Q.pdf", shell=True)


# Clean up
subprocess.call("rm stockMax.pdf stock3Y.pdf stock1Y.pdf stock1Q.pdf", shell=True)
